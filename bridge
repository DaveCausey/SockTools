#!/usr/bin/env node

//
// CLI app to forward a TCP port and capture log data
//
// Usage: <cmd> <in> <out> <log>, where
//  <in> is the port to forward, formatted as '<ch>[:<iface>]:<port>'
//  <out> is the forward destination, formatted as '<ch>[:<host>]:<port>'
//  <log> is a port number on which to stream the log
//
// Example: <cmd> '<<:22100' '>>:22101' 22102
//

var args = process.argv.slice(2);
var inport = args.shift() || '<<:22100';
var outport = args.shift() || '>>:22101';
var logport = args.shift() || '22102';

const net = require('net');
const util = require('util');
const EventEmitter = require('events');
const Logger = require('./logger');
const Parser = require('./parser');
var config = {downlink:parseInputPort(inport), uplink:parseOutputPort(outport), log:{port:logport}};
const rootLogger = new Logger(config.log);
const logger = rootLogger.sub('#');
const log = logger.log;

if (config && config.downlink && config.uplink) {
  var relay = new Relay(config);
}

function Relay(config) {
  var dl = config.downlink, ul = config.uplink;
  net.createServer(openStream).listen(dl.port);

  function openStream(socket) {
    var uparser = new Parser(logger.sub(dl.channel), rootLogger.sub(dl.channel));
    var dparser = new Parser(logger.sub(ul.channel), rootLogger.sub(ul.channel));
    var uplink = new Uplink(ul);

    log('Connected');
    socket.on('data', dataup);
    socket.on('close', closed);
    uplink.on('data', datadown);
    uplink.on('close', close);

    function close() {socket && socket.destroy(); socket = null}
    function closed() {log('Disconnected'); uplink.close(); uplink = null}
    function dataup(data) {uplink && uplink.write(data); uparser.rx(data)}
    function datadown(data) {try { socket && socket.write(data); } catch (e) {}; dparser.rx(data)}
  }
}

function Uplink(config) {
  EventEmitter.call(this);
  var self = this;
  var upQueue = [];
  var _ready = false;
  //var socket = net.connect(config.port, config.addr, onConnect);
  var _socket = null;
  var _server = net.createServer(onConnect).listen(config.port);

  self.write = write;
  self.close = close;

  function write(data) {
    if (upQueue) return upQueue.push(data);
    _socket.write(data);
  }

  function close() {
    _socket && _socket.destroy();
  }

  function onConnect(socket) {
    socket.on('data', rx);
    socket.on('close', closed);
    upQueue.forEach(function(b){socket.write(b)}); 
    _socket = socket;
    upQueue = null;

    function closed() {log('Uplink disconnected'); _server.close(); self.emit('close')}
    function rx(data) {self.emit('data',data)}
  }
}
util.inherits(Uplink,EventEmitter);

function Uplink1(config) {
  EventEmitter.call(this);
  var self = this;
  var upQueue = [];
  var _ready = false;
  var socket = net.connect(config.port, config.addr, onConnect);

  self.write = write;

  function write(data) {
    if (upQueue) return upQueue.push(data);
    socket.write(data);
  }

  function onConnect() {
    socket.on('data', rx);
    socket.on('close', closed);
    upQueue.forEach(function(b){socket.write(b)}); upQueue = null;

    function closed() {log('Uplink disconnected')}
    function rx(data) {self.emit('data',data)}
  }
}
util.inherits(Uplink1,EventEmitter);

function parseInputPort(p) {return parsePort(p,'')}
function parseOutputPort(p) {return parsePort(p,'localhost')}
function parsePort(p,defAddr) {
  var m = p.split(':'); 
  if (m.length === 2) m.splice(1,0,defAddr);
  if (m.length === 3) return {channel:m[0], addr:m[1], port:m[2]};
  console.log('Invalid endpoint argument "%s"', p);
}

