#!/usr/bin/env node

//
// CLI app to loop back data received on a TCP socket
//
// Usage: <cmd> <ch1> [<ch2> ...], where <ch*> is formatted as '<ch>[:<interface>]:<port>'
// Example: <cmd> '<<:22100'
//

var net = require('net');
var Logger = require('./logger');
var Parser = require('./parser');
var argParser = require('./args');
var parseInputPort = require('./args').parseInputPort;

var args = process.argv.slice(2);
var ports = args; if (!ports.length) ports = ['<<:22100'];
var config = {
  channels: ports.map(parseInputPort).filter(function(x){return !!x})
};
var rootLogger = new Logger();
var logger = rootLogger.sub('#');
var log = logger.log;

if (config.channels) {
  config.channels.forEach(listen);
}

function listen(ch) {
  net.createServer(onConnect).listen(ch.port, ch.addr);

  function onConnect(socket) {
    var parser = new Parser(logger.sub(ch.channel),rootLogger.sub(ch.channel));
    socket.on('data', onData).on('close', onClose).on('error', onError);
    log('Connected');

    function onClose() {log('Disconnected')}
    function onData(data) {
      try {socket.write(data);} catch(e) {}
      parser.rx(data);
    }
    function onError(e) {if (e.code != 'ECONNRESET') log('Error: ', e)}
  }
}

