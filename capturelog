#!/usr/bin/env node

//
// CLI app to capture a log to stdout from one or more TCP sockets
//
// Usage: <cmd> <ch1> [<ch2> ...], where <ch*> is formatted as '<ch>:<port>'
// Example: <cmd> '<<:22100' '>>:22101'
//

var args = process.argv.slice(2);
var ports = args; if (!ports.length) ports = ['>>:22100','<<:22101'];
var config = {
  channels: ports.map(function(p,i) {
    var m = p.split(':');
    if (m.length !== 2) console.log('Invalid endpoint argument "%s"', p);
    else return {channel:m[0],port:m[1]};
  }).filter(function(x){return !!x})
};

var net = require('net');
var Logger = require('./logger');
var Parser = require('./parser');
var rootLogger = new Logger();
var logger = rootLogger.sub('#');
var log = logger.log;

if (config.channels) {
  config.channels.forEach(function(ch) {
    listen(ch.port, ch.channel);
  });
}

function listen(port, channel) {
  net.createServer(onConnect).listen(port);

  function onConnect(socket) {
    var parser = new Parser(logger.sub(channel),rootLogger.sub(channel));
    socket.on('data', onData).on('close', onClose);
    log('Connected');

    function onClose() {log('Disconnected')}
    function onData(data) {parser.rx(data)}
  }
}

